import Head from "next/head";
import {IJourney, IJourneyWithStations} from "@/types/types";
import {GetStaticPaths, GetStaticProps, GetStaticPropsContext} from "next";
import {format, intervalToDuration} from 'date-fns';
import Link from "next/link";

export default function Single({journey}: { journey: IJourneyWithStations }) {
    const interval = intervalToDuration({start: new Date(journey.departedAt), end: new Date(journey.returnedAt)});
    return (
        <>
            <Head>
                <title>Single Journey</title>
                <meta name="description" content="Generated by create next app"/>
                <meta name="viewport" content="width=device-width, initial-scale=1"/>
                <link rel="icon" href="/favicon.ico"/>
            </Head>

            <main className="container mx-auto py-12 space-y-4">
                <Link href={`/journeys/`} className="flex items-center">
                    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 20 20" fill="currentColor" className="w-5 h-5">
                        <path fillRule="evenodd"
                            d="M12.79 5.23a.75.75 0 01-.02 1.06L8.832 10l3.938 3.71a.75.75 0 11-1.04 1.08l-4.5-4.25a.75.75 0 010-1.08l4.5-4.25a.75.75 0 011.06.02z"
                            clipRule="evenodd"/>
                    </svg>

                    <div className="ml-1">Journey list</div>
                </Link>

                <div key={journey.id} className="w-1/2 border border-cyan-200 rounded-md shadow-xs">
                    <div className="flex p-4 bg-gradient-to-r from-cyan-500 to-blue-500 text-2xl text-white">
                        <div>{format(new Date(journey.departedAt), 'dd.MM. HH:mm')}</div>
                        <div className="ml-2">-</div>
                        <div className="ml-2">{format(new Date(journey.returnedAt), 'dd.MM.yyyy HH:mm')}</div>
                    </div>

                    <div className="flex p-4 space-x-4">
                        <div className="w-1/2">
                            <div className="text-xs text-slate-700 uppercase tracking-wider">From</div>
                            <div>{journey.departureStationName}</div>
                            <div>{journey.departureStation.address}</div>
                        </div>
                        <div className="w-1/2">
                            <div className="text-xs text-slate-700 uppercase tracking-wider">To</div>
                            <div>{journey.returnStationName}</div>
                            <div>{journey.returnStation.address}</div>
                        </div>
                    </div>

                    <div className="flex space-x-4 p-4">
                        <div className="w-1/2">
                            <div className="text-xs text-slate-700 uppercase tracking-wider">Distance</div>
                            <div>{Math.round((journey.distance / 1000))} km</div>
                        </div>

                        <div className="w-1/2">
                            <div className="text-xs text-slate-700 uppercase tracking-wider">Duration</div>
                            <div className="ml-auto">{interval.minutes}m {interval.seconds}s</div>
                        </div>

                    </div>
                </div>
            </main>
        </>
    );
}

export const getStaticPaths: GetStaticPaths = async () => {
    const res = await fetch(process.env.BACKEND_URL + "/journeys");
    const journeyList = await res.json();

    const paths = journeyList.map((journey: IJourney) => ({
        params: {
            id: journey.id.toString(),
        },
    }));

    return {
        paths,
        fallback: false,
    };
}

export const getStaticProps: GetStaticProps = async (context: GetStaticPropsContext) => {
    const res = await fetch(process.env.BACKEND_URL + "/journeys/" + context.params?.id);
    const journey = await res.json();

    return {
        props: {journey},
    };
}
